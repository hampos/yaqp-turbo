package org.opentox.ontology;

import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.RDFReader;
import com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler;
import com.hp.hpl.jena.shared.Lock;
import com.hp.hpl.jena.vocabulary.DC;
import com.hp.hpl.jena.vocabulary.OWL;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import org.opentox.ontology.namespaces.OTNS;
import org.restlet.data.MediaType;

/**
 * This is a proxy class for {@link com.hp.hpl.jena.ontology.OntModel OntModel}.
 * <code>OntModel</code> is an essential interface in Jena and instances of
 * <code>OntModel </code> are generated by the {@link com.hp.hpl.jena.rdf.model.ModelFactory}.
 * In <code>YaqpOntoModel</code>, instances of it are obtained through its static
 * constructors like {@link YaqpOntModel#createOntModel()  }
 *
 * @author Pantelis Sopasakis
 * @author Charalampos Chomenides
 */
public class YaqpOntModel {

    private OntModel jenaModel;

    /**
     * This is a private constructor that generates new instances of YaqpOntModel.
     *
     * @param specifications Ontological Specifications.
     */
    private YaqpOntModel(OntModelSpec specifications) {
        jenaModel = ModelFactory.createOntologyModel(specifications);
        Map<String, String> prefixesMap = new HashMap<String, String>();
        prefixesMap.put("ot", OTNS.NS);
        prefixesMap.put("owl", OWL.NS);
        prefixesMap.put("dc", DC.NS);
        /*   prefixesMap.put("ot_algorithmTypes", AbsOntClass.NS_AlgorithmTypes);   */
        jenaModel.setNsPrefixes(prefixesMap);
    }

    /**
     * This static method stands for the default constructor of this class.
     * @return new Instance of YaqpOntModel.
     */
    public static YaqpOntModel createOntModel() {
        return new YaqpOntModel(OntModelSpec.OWL_DL_MEM);
    }

    public void read(InputStream in, MediaType mediatype) {
        RDFReader reader = jenaModel.getReader();
        jenaModel.enterCriticalSection(Lock.WRITE);
        jenaModel.leaveCriticalSection();
        reader.setProperty("error-mode", "lax");
        reader.setProperty("WARN_REDEFINITION_OF_ID", "EM_IGNORE");
        reader.read(jenaModel, in, getJenaFormat(mediatype));
    }

    private String getJenaFormat(MediaType mediaType) {

        if (mediaType.equals(MediaType.APPLICATION_RDF_TURTLE)) {
            return "TURTLE";
        } else if (mediaType.equals(MediaType.TEXT_RDF_N3)) {
            return "N3";
        } else if (mediaType.equals(MediaType.TEXT_RDF_NTRIPLES)) {
            return "N-TRIPLE";
        } else {
            return "RDF/XML";
        }
    }

    public void printConsole() {
        jenaModel.write(System.out);
    }
}
